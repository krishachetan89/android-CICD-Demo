version: 2.1

defaults: &defaults
  docker:
    - image: circleci/android:api-28
  environment:
    JVM_OPTS: -Xmx3200m
orbs:
  slack: circleci/slack@3.2.0


jobs:
  unit-tests:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Install fastlane
          command: bundle install
      - run:
          name: Run the unit tests
          command: bundle exec fastlane unit_tests
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
                path: app/build/test-results/
                destination: /test-results/
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - slack/status:
          #mentions: "USERID1,USERID2" # Optional: Enter the Slack IDs of any user or group (sub_team) to be mentioned
          fail_only: false # Optional: if set to `true` then only failure messages will occur.
          webhook: https://hooks.slack.com/services/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 # Optional: Enter a specific webhook here or the default will use $SLACK_WEBHOOK
          #only_for_branch: "" # Optional: If set, a specific branch for which status updates will be sent. In this case, only for pushes to master branch.

  instrumentation-tests:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Install fastlane
          command: bundle install
      - run:
          name: Store service account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Authorize to gcloud
          command: gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json --project=${GOOGLE_PROJECT_ID}
      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)
      - run:
          name: Uninstall crcmod
          command: echo "y" | sudo pip uninstall crcmod
      - run:
          name: Install crcmod
          command: sudo pip install -U crcmod
      - run:
          name: Run the instrumentation tests on firebase
          command: bundle exec fastlane instrumentation_tests
      - store_artifacts:
          path: firebase/
          destination: /firebase/
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

  deploy-internal:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Install fastlane
          command: bundle install
      - run:
          name: Store the google play key
          command: echo $GOOGLE_PLAY_KEY > gplay_key.json
      - run:
          name: Init fastlane supply
          command: bundle exec fastlane supply init
      - run:
          name: Download ci's data
          command: ./ci/download_ci_data.sh
      - run:
          name: Deploy the app to the internal track
          command: bundle exec fastlane deploy_internal
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
  deploy-crashlytics:
      <<: *defaults
      steps:
        - checkout
        - restore_cache:
            key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
        - run:
            name: Install fastlane
            command: bundle install
        - run:
            name: Deploy the app to crashlytics for internal testing
            command: bundle exec fastlane beta
        - save_cache:
            paths:
              - ~/.gradle
            key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}


workflows:
  version: 2
  nighly:
    triggers:
      - schedule:
          cron: "0 3 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - instrumentation-tests
  deploy-crashlytics-internal-testing:
    jobs:
      - unit-tests:
      - instrumentation-tests:
      - hold:
          type: approval
          requires:
            - unit-tests
            - instrumentation-tests
      - deploy-internal:
          filters:
            branches:
              only:
                - /internal.*/
          requires:
            - hold
  deploy-internal-playstore:
    jobs:
      - unit-tests:
          filters:
            branches:
              only:
                - master
      - instrumentation-tests:
          filters:
            branches:
              only:
                - master
      - hold:
          type: approval
          filters:
            branches:
              only:
                - master
          requires:
            - unit-tests
            - instrumentation-tests
      - deploy-internal:
          filters:
            branches:
              only:
                - master
          requires:
            - hold
